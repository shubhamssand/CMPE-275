# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: fileService.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='fileService.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x11\x66ileService.proto\"<\n\x08\x46ileData\x12\x10\n\x08username\x18\x01 \x01(\t\x12\x10\n\x08\x66ilename\x18\x02 \x01(\t\x12\x0c\n\x04\x64\x61ta\x18\x03 \x01(\x0c\"\'\n\x03\x61\x63k\x12\x0f\n\x07success\x18\x01 \x01(\x08\x12\x0f\n\x07message\x18\x02 \x01(\t\"\x1c\n\x08UserInfo\x12\x10\n\x08username\x18\x01 \x01(\t\".\n\x08\x46ileInfo\x12\x10\n\x08username\x18\x01 \x01(\t\x12\x10\n\x08\x66ilename\x18\x02 \x01(\t\"%\n\x10\x46ileListResponse\x12\x11\n\tFilenames\x18\x01 \x01(\t2\x83\x02\n\x0b\x46ileservice\x12\x1f\n\nUploadFile\x12\t.FileData\x1a\x04.ack(\x01\x12&\n\x0c\x44ownloadFile\x12\t.FileInfo\x1a\t.FileData0\x01\x12\x1d\n\nFileSearch\x12\t.FileInfo\x1a\x04.ack\x12\"\n\rReplicateFile\x12\t.FileData\x1a\x04.ack(\x01\x12(\n\x08\x46ileList\x12\t.UserInfo\x1a\x11.FileListResponse\x12\x1d\n\nFileDelete\x12\t.FileInfo\x1a\x04.ack\x12\x1f\n\nUpdateFile\x12\t.FileData\x1a\x04.ack(\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_FILEDATA = _descriptor.Descriptor(
  name='FileData',
  full_name='FileData',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='username', full_name='FileData.username', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='filename', full_name='FileData.filename', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='FileData.data', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=21,
  serialized_end=81,
)


_ACK = _descriptor.Descriptor(
  name='ack',
  full_name='ack',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='ack.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='ack.message', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=83,
  serialized_end=122,
)


_USERINFO = _descriptor.Descriptor(
  name='UserInfo',
  full_name='UserInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='username', full_name='UserInfo.username', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=124,
  serialized_end=152,
)


_FILEINFO = _descriptor.Descriptor(
  name='FileInfo',
  full_name='FileInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='username', full_name='FileInfo.username', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='filename', full_name='FileInfo.filename', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=154,
  serialized_end=200,
)


_FILELISTRESPONSE = _descriptor.Descriptor(
  name='FileListResponse',
  full_name='FileListResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='Filenames', full_name='FileListResponse.Filenames', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=202,
  serialized_end=239,
)

DESCRIPTOR.message_types_by_name['FileData'] = _FILEDATA
DESCRIPTOR.message_types_by_name['ack'] = _ACK
DESCRIPTOR.message_types_by_name['UserInfo'] = _USERINFO
DESCRIPTOR.message_types_by_name['FileInfo'] = _FILEINFO
DESCRIPTOR.message_types_by_name['FileListResponse'] = _FILELISTRESPONSE

FileData = _reflection.GeneratedProtocolMessageType('FileData', (_message.Message,), dict(
  DESCRIPTOR = _FILEDATA,
  __module__ = 'fileService_pb2'
  # @@protoc_insertion_point(class_scope:FileData)
  ))
_sym_db.RegisterMessage(FileData)

ack = _reflection.GeneratedProtocolMessageType('ack', (_message.Message,), dict(
  DESCRIPTOR = _ACK,
  __module__ = 'fileService_pb2'
  # @@protoc_insertion_point(class_scope:ack)
  ))
_sym_db.RegisterMessage(ack)

UserInfo = _reflection.GeneratedProtocolMessageType('UserInfo', (_message.Message,), dict(
  DESCRIPTOR = _USERINFO,
  __module__ = 'fileService_pb2'
  # @@protoc_insertion_point(class_scope:UserInfo)
  ))
_sym_db.RegisterMessage(UserInfo)

FileInfo = _reflection.GeneratedProtocolMessageType('FileInfo', (_message.Message,), dict(
  DESCRIPTOR = _FILEINFO,
  __module__ = 'fileService_pb2'
  # @@protoc_insertion_point(class_scope:FileInfo)
  ))
_sym_db.RegisterMessage(FileInfo)

FileListResponse = _reflection.GeneratedProtocolMessageType('FileListResponse', (_message.Message,), dict(
  DESCRIPTOR = _FILELISTRESPONSE,
  __module__ = 'fileService_pb2'
  # @@protoc_insertion_point(class_scope:FileListResponse)
  ))
_sym_db.RegisterMessage(FileListResponse)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class FileserviceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.UploadFile = channel.stream_unary(
          '/Fileservice/UploadFile',
          request_serializer=FileData.SerializeToString,
          response_deserializer=ack.FromString,
          )
      self.DownloadFile = channel.unary_stream(
          '/Fileservice/DownloadFile',
          request_serializer=FileInfo.SerializeToString,
          response_deserializer=FileData.FromString,
          )
      self.FileSearch = channel.unary_unary(
          '/Fileservice/FileSearch',
          request_serializer=FileInfo.SerializeToString,
          response_deserializer=ack.FromString,
          )
      self.ReplicateFile = channel.stream_unary(
          '/Fileservice/ReplicateFile',
          request_serializer=FileData.SerializeToString,
          response_deserializer=ack.FromString,
          )
      self.FileList = channel.unary_unary(
          '/Fileservice/FileList',
          request_serializer=UserInfo.SerializeToString,
          response_deserializer=FileListResponse.FromString,
          )
      self.FileDelete = channel.unary_unary(
          '/Fileservice/FileDelete',
          request_serializer=FileInfo.SerializeToString,
          response_deserializer=ack.FromString,
          )
      self.UpdateFile = channel.stream_unary(
          '/Fileservice/UpdateFile',
          request_serializer=FileData.SerializeToString,
          response_deserializer=ack.FromString,
          )


  class FileserviceServicer(object):

    def UploadFile(self, request_iterator, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DownloadFile(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FileSearch(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ReplicateFile(self, request_iterator, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FileList(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FileDelete(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UpdateFile(self, request_iterator, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_FileserviceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'UploadFile': grpc.stream_unary_rpc_method_handler(
            servicer.UploadFile,
            request_deserializer=FileData.FromString,
            response_serializer=ack.SerializeToString,
        ),
        'DownloadFile': grpc.unary_stream_rpc_method_handler(
            servicer.DownloadFile,
            request_deserializer=FileInfo.FromString,
            response_serializer=FileData.SerializeToString,
        ),
        'FileSearch': grpc.unary_unary_rpc_method_handler(
            servicer.FileSearch,
            request_deserializer=FileInfo.FromString,
            response_serializer=ack.SerializeToString,
        ),
        'ReplicateFile': grpc.stream_unary_rpc_method_handler(
            servicer.ReplicateFile,
            request_deserializer=FileData.FromString,
            response_serializer=ack.SerializeToString,
        ),
        'FileList': grpc.unary_unary_rpc_method_handler(
            servicer.FileList,
            request_deserializer=UserInfo.FromString,
            response_serializer=FileListResponse.SerializeToString,
        ),
        'FileDelete': grpc.unary_unary_rpc_method_handler(
            servicer.FileDelete,
            request_deserializer=FileInfo.FromString,
            response_serializer=ack.SerializeToString,
        ),
        'UpdateFile': grpc.stream_unary_rpc_method_handler(
            servicer.UpdateFile,
            request_deserializer=FileData.FromString,
            response_serializer=ack.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Fileservice', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaFileserviceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def UploadFile(self, request_iterator, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DownloadFile(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FileSearch(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ReplicateFile(self, request_iterator, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FileList(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FileDelete(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UpdateFile(self, request_iterator, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaFileserviceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def UploadFile(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    UploadFile.future = None
    def DownloadFile(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    def FileSearch(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    FileSearch.future = None
    def ReplicateFile(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    ReplicateFile.future = None
    def FileList(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    FileList.future = None
    def FileDelete(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    FileDelete.future = None
    def UpdateFile(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    UpdateFile.future = None


  def beta_create_Fileservice_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('Fileservice', 'DownloadFile'): FileInfo.FromString,
      ('Fileservice', 'FileDelete'): FileInfo.FromString,
      ('Fileservice', 'FileList'): UserInfo.FromString,
      ('Fileservice', 'FileSearch'): FileInfo.FromString,
      ('Fileservice', 'ReplicateFile'): FileData.FromString,
      ('Fileservice', 'UpdateFile'): FileData.FromString,
      ('Fileservice', 'UploadFile'): FileData.FromString,
    }
    response_serializers = {
      ('Fileservice', 'DownloadFile'): FileData.SerializeToString,
      ('Fileservice', 'FileDelete'): ack.SerializeToString,
      ('Fileservice', 'FileList'): FileListResponse.SerializeToString,
      ('Fileservice', 'FileSearch'): ack.SerializeToString,
      ('Fileservice', 'ReplicateFile'): ack.SerializeToString,
      ('Fileservice', 'UpdateFile'): ack.SerializeToString,
      ('Fileservice', 'UploadFile'): ack.SerializeToString,
    }
    method_implementations = {
      ('Fileservice', 'DownloadFile'): face_utilities.unary_stream_inline(servicer.DownloadFile),
      ('Fileservice', 'FileDelete'): face_utilities.unary_unary_inline(servicer.FileDelete),
      ('Fileservice', 'FileList'): face_utilities.unary_unary_inline(servicer.FileList),
      ('Fileservice', 'FileSearch'): face_utilities.unary_unary_inline(servicer.FileSearch),
      ('Fileservice', 'ReplicateFile'): face_utilities.stream_unary_inline(servicer.ReplicateFile),
      ('Fileservice', 'UpdateFile'): face_utilities.stream_unary_inline(servicer.UpdateFile),
      ('Fileservice', 'UploadFile'): face_utilities.stream_unary_inline(servicer.UploadFile),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Fileservice_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('Fileservice', 'DownloadFile'): FileInfo.SerializeToString,
      ('Fileservice', 'FileDelete'): FileInfo.SerializeToString,
      ('Fileservice', 'FileList'): UserInfo.SerializeToString,
      ('Fileservice', 'FileSearch'): FileInfo.SerializeToString,
      ('Fileservice', 'ReplicateFile'): FileData.SerializeToString,
      ('Fileservice', 'UpdateFile'): FileData.SerializeToString,
      ('Fileservice', 'UploadFile'): FileData.SerializeToString,
    }
    response_deserializers = {
      ('Fileservice', 'DownloadFile'): FileData.FromString,
      ('Fileservice', 'FileDelete'): ack.FromString,
      ('Fileservice', 'FileList'): FileListResponse.FromString,
      ('Fileservice', 'FileSearch'): ack.FromString,
      ('Fileservice', 'ReplicateFile'): ack.FromString,
      ('Fileservice', 'UpdateFile'): ack.FromString,
      ('Fileservice', 'UploadFile'): ack.FromString,
    }
    cardinalities = {
      'DownloadFile': cardinality.Cardinality.UNARY_STREAM,
      'FileDelete': cardinality.Cardinality.UNARY_UNARY,
      'FileList': cardinality.Cardinality.UNARY_UNARY,
      'FileSearch': cardinality.Cardinality.UNARY_UNARY,
      'ReplicateFile': cardinality.Cardinality.STREAM_UNARY,
      'UpdateFile': cardinality.Cardinality.STREAM_UNARY,
      'UploadFile': cardinality.Cardinality.STREAM_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'Fileservice', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
